---
import { Image } from 'astro:assets';
const { images, id } = Astro.props;
---
<product-carousel aria-roledescription="carousel" aria-label="Product images">
  <div class="grid gap-4">
    <div
      id="product-carousel-images"
      aria-live="off"
      class="flex w-full overflow-x-auto rounded-lg border bg-muted snap-x snap-mandatory pointer-fine:overflow-hidden"
      data-astro-transition-scope={`product-image-${id}`}
      transition:name={`product-image-${id}`}
    >
      {images.map((image, index) => (
        <div
          id={`product-carousel-image-${index}`}
          class="product-carousel-image w-full aspect-square shrink-0 snap-start"
          role="tabpanel"
          aria-roledescription="slide"
          aria-label={`${index + 1} of ${images.length}`}
          aria-hidden={index === 0 ? 'false' : 'true'}
        >
          <Image
            src={image.src}
            alt={image.alt}
            loading={index === 0 ? 'eager' : 'lazy'}
            decoding="async"
            class="w-full h-full object-cover"
          />
        </div>
      ))}
    </div>

    {images.length > 1 && (
      <div class="flex gap-2 justify-center items-center">
        <button
          id="product-carousel-prev"
          aria-controls="product-carousel-images"
          aria-label="Previous image"
          class="p-2 rounded-md border bg-card text-card-foreground hover:bg-accent disabled:opacity-50"
        >
          <svg fill="currentColor" viewBox="0 0 24 24" aria-hidden="true" width="20">
            <path d="M7.828 11H20v2H7.828l5.364 5.364-1.414 1.414L4 12l7.778-7.778 1.414 1.414L7.828 11Z"></path>
          </svg>
        </button>

        <div role="tablist" aria-label="Image thumbnails" class="flex gap-2">
          {images.map((image, index) => (
            <button
              type="button"
              role="tab"
              aria-label={`Image ${index + 1}`}
              aria-selected={index === 0 ? 'true' : 'false'}
              aria-controls={`product-carousel-image-${index}`}
              class="overflow-hidden w-16 h-16 rounded-md bg-muted border aria-selected:ring-2 aria-selected:ring-ring"
            >
              <Image
                src={image.src}
                alt={`Thumbnail for product image ${index + 1}`}
                loading="lazy"
                width="64"
                height="64"
                decoding="async"
                class="w-full h-full object-cover"
              />
            </button>
          ))}
        </div>

        <button
          id="product-carousel-next"
          aria-controls="product-carousel-images"
          aria-label="Next image"
          class="p-2 rounded-md border bg-card text-card-foreground hover:bg-accent disabled:opacity-50"
        >
          <svg fill="currentColor" viewBox="0 0 24 24" aria-hidden="true" width="20" class="rotate-180">
            <path d="M7.828 11H20v2H7.828l5.364 5.364-1.414 1.414L4 12l7.778-7.778 1.414 1.414L7.828 11Z"></path>
          </svg>
        </button>
      </div>
    )}
  </div>
</product-carousel>

<script type="module">
  customElements.define("product-carousel", class extends HTMLElement {
    #s = this.querySelector("#product-carousel-images");
    #e;
    #t = [...this.querySelectorAll(".product-carousel-image")];
    #u = window.matchMedia("(prefers-reduced-motion: reduce)");
    #i = 0;
    #r;

    constructor() {
      super();

      if (this.#t.length > 1) {
        this.#e = [...this.querySelectorAll('button[role="tab"]')];

        for (const i of this.#e) {
          i.addEventListener("click", this.#l);
          i.addEventListener("keydown", this.#f);
          i.addEventListener("focus", this.#o);
          i.addEventListener("blur", this.#a);
        }

        const t = this.querySelector("#product-carousel-prev");
        t?.addEventListener("click", () => this.#n(this.#h()));
        t?.addEventListener("focus", this.#o);
        t?.addEventListener("blur", this.#a);

        const e = this.querySelector("#product-carousel-next");
        e?.addEventListener("click", () => this.#n(this.#c()));
        e?.addEventListener("focus", this.#o);
        e?.addEventListener("blur", this.#a);

        const s = new IntersectionObserver(this.#b, {
          root: this.#s,
          threshold: 0.5,
        });
        for (const i of this.#t) {
          s.observe(i);
        }
      }
    }

    #h() {
      let t = this.#i - 1;
      return t < 0 ? this.#t.length - 1 : t;
    }

    #c() {
      let t = this.#i + 1;
      return t >= this.#t.length ? 0 : t;
    }

    #n(t) {
      this.#i = t;
      for (let e = 0; e < this.#t.length; e++) {
        this.#t[e].setAttribute("aria-hidden", e !== t ? "true" : "false");
      }
      this.#s.scrollTo({
        left: this.#s.offsetWidth * t,
        behavior: this.#v(),
      });
    }

    #d() {
      for (const e of this.#e) {
        e.setAttribute("aria-selected", "false");
        e.classList.remove("aria-selected:ring-2", "aria-selected:ring-ring");
      }
      const t = this.#e[this.#i];
      t.setAttribute("aria-selected", "true");
      t.classList.add("aria-selected:ring-2", "aria-selected:ring-ring");
    }

    #l = (t) => {
      if (!(t.currentTarget instanceof HTMLButtonElement)) return;
      t.preventDefault();
      const e = this.#e.indexOf(t.currentTarget);
      this.#r = e;
      this.#n(e);
    };

    #f = (t) => {
      let e;
      switch (t.key) {
        case "ArrowRight": {
          e = this.#c();
          break;
        }
        case "ArrowLeft": {
          e = this.#h();
          break; 
        }
        case "Home": {
          e = 0;
          break;
        }
        case "End": {
          e = this.#t.length - 1;
          break;
        }
      }
      if (e !== void 0) {
        t.preventDefault();
        this.#r = e;
        this.#n(e);
      }
    };

    #b = (t) => {
      for (const e of t) {
        if (!e.isIntersecting || !(e.target instanceof HTMLDivElement)) continue;
        const s = this.#t.indexOf(e.target);
        this.#i = s;
        this.#d();
        if (this.#r !== void 0) {
          this.#g(s);
          if (this.#r === s) {
            this.#r = void 0;
          }
        }
      }
    };

    #g(t) {
      this.#e[t].focus();
    }

    #o = () => {
      this.#s.setAttribute("aria-live", "polite");
    };

    #a = () => {
      this.#s.setAttribute("aria-live", "off");
    };

    #v() {
      return this.#u.matches ? "auto" : "smooth";
    }
  });
</script>
